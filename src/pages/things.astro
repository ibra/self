---
import DetailModal from "@components/DetailModal.astro";
import Nav from "@components/Nav.astro";
import Layout from "@layouts/BaseLayout.astro";
import Container from "@components/Container.astro";
import Heading from "@components/Heading.astro";

const categories = [
  {
    name: "software",
    items: [
      {
        title: "lachesis",
        description:
          "Lightweight cross-platform time-tracking application written in Rust.",
        url: "https://github.com/ibra/lachesis",
        delay: 150,
      },
      {
        title: "snip.tf",
        description:
          "A modern, minimalistic pastebin. Developed backend in Rust, deployed on the edge.",
        url: "https://snip.tf/",
        delay: 250,
      },
      {
        title: "Ibralogue",
        description:
          "Robust, extensible dialogue framework for the Unity game engine.",
        url: "https://github.com/Ibralogue/Ibralogue",
        delay: 350,
      },
      {
        title: "pseudocoding.net",
        description:
          "Web-based compiler for the AL/GCSE Pseudocode standard.",
        url: "https://pseudocoding.net",
        delay: 450,
      },
    ],
  },
  {
    name: "games",
    items: [
      {
        title: "FOGBOUND",
        description:
          "Narrative-driven psychological horror game set in a toxic, fog-ridden Lahore.",
        url: "https://instagram.com/generatednoise",
        delay: 150,
      },
      {
        title: "Pointblank",
        description:
          "Fast-paced twin-stick shooter where you have a single bullet.",
        url: "https://store.steampowered.com/app/1221330/Pointblank",
        delay: 250,
      },
      {
        title: "more... (itch.io)",
        description:
          "Collection of various little games made for jams and competitions.",
        url: "https://ibrahh.itch.io",
        delay: 350,
      },
    ],
  },
  {
    name: "poetry",
    items: [
      {
        title: "test",
        description: "...",
        url: "#",
        delay: 150,
      },
    ],
  },
];

---
<Layout title="ibrahim hisham ~ work" padding="16" path="/work">
  <Container>
    <Nav />
    <Heading title="things" styling="stagger-50" />
    <h2 class="stagger-100 animate-fade text-slate-400 text-lg mb-5">
     pick a category: 
    </h2>

    <!-- CATEGORY BUTTONS -->
    <div class="flex flex-wrap gap-3 mb-6" id="category-buttons">
      {categories.map((cat, index) => (
        <button
          class="category-btn text-sm md:text-base px-4 py-2 rounded border border-slate-600 text-slate-400 hover:text-white hover:border-white transition-all duration-300"
          data-index={index}
        >
          {cat.name}
        </button>
      ))}
    </div>

    <!-- CATEGORY PANELS -->
    <div id="category-panels" class="relative w-full">
      {categories.map((cat, index) => (
        <ul
          class="category-panel flex flex-col gap-4 transition-opacity duration-500 ease-in-out"
          style={`display: ${index === 0 ? "flex" : "none"}`}
          data-index={index}
        >
          {cat.items.map((item) => (
            <DetailModal
              title={item.title}
              description={item.description}
              url={item.url}
              delay={item.delay}
            />
          ))}
        </ul>
      ))}
    </div>

    <script type="module">
      const buttons = document.querySelectorAll(".category-btn");
      const panels = document.querySelectorAll(".category-panel");
      let active = 0;

      function setActive(index) {
        buttons.forEach((btn, i) => {
          btn.classList.toggle("border-white", i === index);
          btn.classList.toggle("text-white", i === index);
          btn.classList.toggle("border-slate-600", i !== index);
          btn.classList.toggle("text-slate-400", i !== index);
        });

        panels.forEach((panel, i) => {
          if (i === index) {
            panel.style.display = "flex";
            requestAnimationFrame(() => {
              panel.style.opacity = "1";
            });
          } else {
            panel.style.opacity = "0";
            setTimeout(() => {
              panel.style.display = "none";
            }, 400);
          }
        });
      }

      buttons.forEach((btn) => {
        btn.addEventListener("click", () => {
          const index = parseInt(btn.dataset.index);
          if (index === active) return;
          setActive(index);
          active = index;
        });
      });

      setActive(0);
    </script>
  </Container>
</Layout>